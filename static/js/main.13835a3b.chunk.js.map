{"version":3,"sources":["Search.js","App.js","reportWebVitals.js","index.js"],"names":["CURRENT_PAGE","Search","props","state","queryString","results","submitted","finished","pageNumbers","total_count","handleChange","bind","handleSubmit","getInfo","resetState","handleClick","e","this","setState","target","value","fetchResults","event","id","fetch","API","then","res","json","data","url","pos","a","copyResults","items","item","Promise","all","genUserData","starred","followers","length","public_repos","i","Math","ceil","push","map","number","onClick","ListGroup","Item","align","src","avatar_url","width","height","alt","href","html_url","login","stars","repos","limit","forEach","element","pagination","className","type","name","placeholder","onKeyPress","key","preventDefault","onChange","required","showFinal","returnResults","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13835a3b.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\n\r\nconst API           = 'https://api.github.com/search/users?q=';\r\nconst PAGE_OP       = '&page=';\r\nconst PER_PAGE_OP   = '&per_page=';\r\nconst PER_PAGE      = '25';\r\nvar CURRENT_PAGE    = '1';\r\nconst TEST          = 'https://6108a740d73c6400170d39e6.mockapi.io/TestFields';\r\n\r\n\r\nclass Search extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            queryString:'',\r\n            results:[],\r\n            submitted: false,\r\n            finished: false,\r\n            pageNumbers: [],\r\n            total_count: 0\r\n\r\n        };\r\n        this.handleChange   = this.handleChange.bind(this);\r\n        this.handleSubmit   = this.handleSubmit.bind(this);\r\n        this.getInfo        = this.getInfo.bind(this);\r\n        this.resetState     = this.resetState.bind(this);\r\n        this.handleClick     = this.handleClick.bind(this);\r\n    }\r\n\r\n    //as field changes, update queryString\r\n    handleChange(e) {\r\n        this.resetState();\r\n        this.setState({\r\n            queryString: e.target.value, \r\n            submitted: false});\r\n    }\r\n    //on submit button press, retrieve queried results\r\n    handleSubmit(e){\r\n        this.fetchResults();\r\n        this.setState({pageNumbers: []});\r\n    }\r\n\r\n    handleClick(event) {\r\n        this.setState({submitted: false})\r\n        CURRENT_PAGE = event.target.id;\r\n        this.fetchResults();\r\n    }\r\n\r\n    fetchResults(){\r\n        fetch(API + this.state.queryString + PAGE_OP + CURRENT_PAGE + PER_PAGE_OP + PER_PAGE)\r\n        .then(res => res.json())\r\n        .then(data => {      \r\n          this.setState({\r\n            results: data,\r\n            total_count: data.total_count\r\n          });\r\n        })\r\n    }\r\n\r\n\r\n    // This function handles API calls for each individual github user returned in results list\r\n    async getInfo(url, pos){\r\n\r\n        //array holding star count, full name (if exists), and follower count in that order.\r\n        var fetched = {};\r\n        var copyResults = [];\r\n        copyResults = this.state.results.items;\r\n        let items = {...copyResults};\r\n        let item = items[pos];\r\n\r\n        //test against local data\r\n        // fetch(TEST)\r\n        // .then(res => res.json())\r\n        // .then(data => {      \r\n        //     item['followers'] = data[0].followers;\r\n        //     item['stars'] = data[0].stars;\r\n        //     item['repos'] = data[0].repos;\r\n        //     copyResults[pos] = item;\r\n        //     this.setState({results:copyResults});\r\n            \r\n        // })\r\n\r\n        //fetch for both gen user url and starred url for number of starred repos -- execute in parallel and wait till complete\r\n        Promise.all([\r\n            fetch(url, ).then(res => res.json()),\r\n            fetch(url + '/starred').then(res => { return res.json();})\r\n        ]).then(([genUserData, starred]) => {\r\n            item['followers'] = genUserData.followers;\r\n            item['stars'] = starred.length;\r\n            item['repos'] = genUserData.public_repos;\r\n            copyResults[pos] = item;\r\n            this.setState({results:copyResults});\r\n        })\r\n    }\r\n\r\n\r\n    //logic for necessary page buttons to display results\r\n    pagination(){\r\n        if(this.state.results.total_count > 0){\r\n            //total page numbers to display\r\n            for(let i  =  0; i < Math.ceil(this.state.results.total_count / PER_PAGE); i++){\r\n                this.state.pageNumbers.push(i+1);\r\n            }\r\n        }\r\n    }\r\n\r\n    resetState(){\r\n        this.setState({queryString:'', results: [], submitted: false, pageNumbers: []});\r\n    }\r\n\r\n\r\n    showFinal(){\r\n        if(this.state.results.items){\r\n            return(<p>Loading...</p>)\r\n        }\r\n\r\n        return(\r\n            <> \r\n\r\n            <p>{this.state.total_count} results for the search '{this.state.queryString}'</p>\r\n            {this.state.pageNumbers.map(number => (\r\n                    <button id={number} onClick={this.handleClick}> {number} </button> \r\n                ))}\r\n                <ListGroup>\r\n                    {this.state.results.map(item => (\r\n                    <ListGroup.Item align = \"left\">\r\n                        <img src={item.avatar_url} width=\"40px\" height=\"40px\" alt=''/>\r\n                        <a href={item.html_url}>{item.login} </a>\r\n                        | Followers: {item.followers} | Stars: {item.stars} | Public Repos: {item.repos}\r\n                    </ListGroup.Item>\r\n                    ))}\r\n                </ListGroup>\r\n\r\n            </>\r\n        )\r\n    }\r\n\r\n    //This function fetches data for each user in the results list, and sets it up to be rendered after search\r\n    returnResults(){\r\n        var pos = 0;\r\n        var limit = 0;\r\n        (this.state.results.total_count < 25) ? limit = this.state.results.total_count : limit = 25;\r\n\r\n        //for each user, call getInfo to learn follower/star count etc.\r\n        if (typeof this.state.results.items !== \"undefined\") {\r\n            this.setState({\r\n                submitted: false\r\n            })\r\n            this.state.results.items.forEach(element => {\r\n                    this.getInfo(element.url, pos);\r\n                    pos++;\r\n\r\n            });\r\n\r\n        if(pos === limit){\r\n            this.setState({\r\n                submitted: true\r\n            })\r\n        }\r\n\r\n        //prevent from overriding previous pagination\r\n        if(this.state.pageNumbers.length < 1){\r\n            this.pagination();\r\n        }\r\n\r\n        return(<p>Search through all Github users!</p>)\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <form className=\"searchBar\">\r\n                    <input\r\n                        type='text'\r\n                        name='q'\r\n                        className='input'\r\n                        placeholder='Search for users'\r\n                        onKeyPress={(e) => e.key === 'Enter' && e.preventDefault()} //require submission through submit button\r\n                        onChange={this.handleChange}\r\n                        required\r\n                     />\r\n                 <input type=\"button\" value=\"Search\" onClick={this.handleSubmit}/>\r\n                </form>\r\n                {this.state.submitted ? this.showFinal()\r\n                    : this.returnResults()}\r\n             </div>   \r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import './App.css';\nimport React, { Component } from 'react';\nimport Search from './Search';\n\nfunction App (){\n\n    return (\n      <div className=\"App\">\n        <h1>Github Search using Github API</h1>\n        <Search></Search>\n      </div>\n    );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}